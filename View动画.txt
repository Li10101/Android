Android系统提供的动画框架：View动画和属性动画，Drawable动画（逐帧动画）
View动画（补间动画）：只能用于View，并且没有改变View的响应区域，包括AlphaAnimation(透明动画)，RotateAnimation（旋转动画）
                      ，ScaleAnimation（缩放动画），TranslatAnimation（平移动画）
View动画提供AnimationSet动画集合类，AnimationSet可以将View动画以组合的形式显示出来
属性动画：Android3.0（api级别11）添加了属性动画，属性动画可以对该类的对象进行动画操作（通过反射技术获取和执行属性的get，set方法）
         属性动画提供的动画集合类（AnimatorSet）
Drawable动画（逐帧动画）:绘制动画动过一个接一个的加载一些列Drawable资源来创建动画。
TimeInterpolator:时间插值器，根据时间流逝的百分比计算出动画进度的百分比。
VIew动画和属性动画都会用到时间插值器
TypeEvaluator类型估值器：针对于属性动画的，View动画不需要
作用：根据属性值改变的百分比计算出改变后的属性值
View动画：补间动画指定动画的开始，结束的“关键帧”，动画的中间帧由系统计算并补齐，持有该动画的VIew的便捷不会自动调整适应View的显示区域
及时这样冬瓜仍会被绘制在超出其视图边界且不会被裁切，若动画超出父视图的边界会出现裁切
<?xml version="1.0" encoding="utf-8"?>
<set xmlns:android="http://schemas.android.com/apk/res/android"
    android:interpolator="@[package:]anim/interpolator_resource"
    android:shareInterpolator=["true" | "false"] >
    <alpha
        android:fromAlpha="float"
        android:toAlpha="float" />
    <scale
        android:fromXScale="float"
        android:toXScale="float"
        android:fromYScale="float"
        android:toYScale="float"
        android:pivotX="float"
        android:pivotY="float" />
    <translate
        android:fromXDelta="float"
        android:toXDelta="float"
        android:fromYDelta="float"
        android:toYDelta="float" />
    <rotate
        android:fromDegrees="float"
        android:toDegrees="float"
        android:pivotX="float"
        android:pivotY="float" />
    <set>
        ...
    </set>
</set>
android:interpolator
Interpolator resource. 设置动画集合所采用的插值器，默认值为@android:anim/accelerate_decelerate_interpolator

android:shareInterpolator
Boolean. 表示集合中的动画是否共享集合的插值器。当值为true且集合没有设置插值器，
此时集合中的动画就会使用默认的插值器@android:anim/accelerate_decelerate_interpolator，
但是你也可以为集合中的动画单独指定所需的插值器


AlphaAnimation（透明动画）
<alpha>标签相关属性如下所示：
android:fromAlpha
Float. 设置透明度的初始值，其中0.0是透明，1.0是不透明的。

android:toAlpha
Float. 设置透明度的结束值，其中0.0是透明，1.0是不透明的。
duration="2000" 动画的执行时间 
     
<ImageView
    android:id="@+id/image"
    android:layout_width="200dp"
    android:layout_height="200dp"
    android:layout_gravity="center"
    android:src="@drawable/second_pic"
    android:scaleType="centerCrop"
    android:alpha="1.0" >
</ImageView>

loadAnimation = AnimationUtils.loadAnimation(getActivity(),
        R.anim.base_animation_alpha);
loadAnimation.setFillAfter(true);
image.startAnimation(loadAnimation);    

ScaleAnimation（缩放动画）
<scale>标签相关属性如下所示：
android:fromXScale
Float. 水平方向缩放比例的初始值，其中1.0是没有任何变化。
android:toXScale
Float. 水平方向缩放比例的结束值，其中1.0是没有任何变化。
android:fromYScale
Float. 竖直方向缩放比例的初始值，其中1.0是没有任何变化。
android:toYScale
Float. 竖直方向缩放比例的结束值，其中1.0是没有任何变化。
android:pivotX
Float. 缩放中心点的x坐标
android:pivotY
Float. 缩放中心点的y坐标



TranslatAnimation（平移动画）
<translate>标签相关属性如下所示：
android:fromXDelta
Float or percentage. 移动起始点的x坐标. 表示形式有三种：
1 相对于自己的左边界的距离，单位像素值。（例如 "5"）
2 相对于自己的左边界的距离与自身宽度的百分比。（例如  "5%"）
3 相对于父View的左边界的距离与父View宽度的百分比。（例如 "5%p"）
android:toXDelta
Float or percentage. 移动结束点的x坐标. 表现形式同上
android:fromYDelta
Float or percentage. 移动起始点的y坐标. 表示形式有三种：
1 相对于自己的上边界的距离，单位像素值。（例如 "5"）
2 相对于自己的上边界的距离与自身高度的百分比。（例如  "5%"）
3 相对于父View的上边界的距离与父View高度的百分比。（例如 "5%p"）
android:toYDelta
Float or percentage. 移动结束点的y坐标. 表现形式同上


RotateAnimation（旋转动画）
<rotate>标签相关属性如下所示：
android:fromDegrees
Float. 旋转初始的角度。
android:toDegrees
Float. 旋转结束的角度。
android:pivotX
Float or percentage. 旋转中心点x坐标，表示形式有三种：
1 相对于自己的左边界的距离，单位像素值。（例如 "5"）
2 相对于自己的左边界的距离与自身宽度的百分比。（例如 "5%"）
3 相对于父View的左边界的距离与父View宽度的百分比。（例如 "5%p"）
android:pivotY
Float or percentage. 旋转中心点y坐标，表示形式有三种：
1 相对于自己的上边界的距离，单位像素值。（例如 "5"）
2 相对于自己的上边界的距离与自身宽度的百分比。（例如 "5%"）
3 相对于父View的上边界的距离与父View高度的百分比。（例如 "5%p"）



补间动画（Tween animation）两个常用的特殊场景
1.通过布局动画（LayoutAnimation）给ViewGroup的子View指定入场动画
实现代码如下：
首先通过xml定义ViewGroup的子View入场动画，
代码如下：

res/anim/zoom_in.xml

<?xml version="1.0" encoding="utf-8"?>

<set xmlns:android="http://schemas.android.com/apk/res/android"

    android:interpolator="@android:anim/decelerate_interpolator" >

  <scale
        
android:duration="500"
        
android:fromXScale="0.1"
       
 android:fromYScale="0.1"
        
android:pivotX="50%"
       
 android:pivotY="50%"
       
 android:toXScale="1.0"
       
 android:toYScale="1.0" />
 
 <alpha
        
android:duration="500"
        
android:fromAlpha="0"
        
android:toAlpha="1.0" />

</set>


接着为ListView设置布局动画（LayoutAnimation），
代码如下所示：

LayoutAnimationController lac=new LayoutAnimationController(AnimationUtils.loadAnimation(this, R.anim.zoom_in));

lac.setDelay(0.5f);

lac.setOrder(LayoutAnimationController.ORDER_RANDOM);

mListView.setLayoutAnimation(lac);

//mListView.startLayoutAnimation(); //可以通过该方法控制动画在何时播放。


上面是通过java代码来为ListView设置布局动画（LayoutAnimation）的，
其实通过xml也可以为ListView设置布局动画（LayoutAnimation），
代码如下所示：

<ListView
    
android:id="@+id/listView"
    
android:layoutAnimation="@anim/anim_layout"
   
 android:layout_width="match_parent"
    
android:layout_height="match_parent" >

</ListView>


res/anim/anim_layout.xml

<?xml version="1.0" encoding="utf-8"?>

<layoutAnimation xmlns:android="http://schemas.android.com/apk/res/android"
    
android:delay="0.5"
    
android:animationOrder="random"
    
android:animation="@anim/zoom_in"/>


2.通过补间动画为Activity自定义切换动画
通过调用Activity类的overridePendingTransition(int enterAnim, int exitAnim)
方法可以实现自定义Activity的切换动画，注意这个方法必须在startActivity和finish调用之后被调用，
否者没有效果。


Drawable动画（逐帧动画）
同来逐帧显示预先定义好的一组图片，类似电影播放
不同于补间动画，逐帧动画资源文件放在drawable文件夹下。
语法：
<?xml version="1.0" encoding="utf-8"?>
<animation-list xmlns:android="http://schemas.android.com/apk/res/android"
    android:oneshot=["true" | "false"] >
    <item
        android:drawable="@[package:]drawable/drawable_resource_name"
        android:duration="integer" />
</animation-list>

<animation-list>标签用来包含逐帧动画的每一帧。
<animation-list>标签的相关属性如下所示：
android:oneshot
Boolean. 当设置为true时动画只会播放一次，否者会循环播放。

<item>用来表示逐帧动画的每一帧图片。
<item>标签的相关属性如下所示：
android:drawable
Drawable resource. 设置当前帧对应的Drawable 资源。
android:duration
Integer. 设置显示该帧的时间, 单位为毫秒（milliseconds）。
注意：重要的是要注意，在Activity的onCreate（）方法中
不能调用AnimationDrawable的start（）方法，因为AnimationDrawable
尚未完全附加到窗口。 如果你想立即播放动画，而不需要交互，
那么你可能想从Activity的onWindowFocusChanged（）方法调用它，
当Android将你的窗口聚焦时，它会被调用。





属性动画
ViewPropertyAnimator
使用方式：View.animate后跟translationX()等方法，动画会自动执行
view.animate().translationX(500);  
View的每个方法都对应了ViewPropertyAnimator的两个方法，其中带-By()后缀的是增量版本的方法，
例如translationX(100)表示用动画把VIew的translationX值渐变为100，-By表示用动画把View的translationX值渐变地增加100
ObjectAnimator
使用方式：
1.如果是自定义控件，需要添加 setter / getter 方法；
2.用 ObjectAnimator.ofXXX() 创建 ObjectAnimator 对象；
3.用 start() 方法执行动画。
通用功能
1.setDuration(int duration)设置动画时长
// imageView1: 500 毫秒
imageView1.animate()  
        .translationX(500)
        .setDuration(500);

// imageView2: 2 秒
ObjectAnimator animator = ObjectAnimator.ofFloat(  
        imageView2, "translationX", 500);
animator.setDuration(2000);  
animator.start(); 
2.setInterpolator(Interpolator interpolayor)设置Interpolator
Interpolator 其实就是速度设置器。你在参数里填入不同的 Interpolator ,
动画就会以不同的速度模型来执行
// imageView1: 线性 Interpolator，匀速
imageView1.animate()  
        .translationX(500)
        .setInterpolator(new LinearInterpolator());

// imageView: 带施法前摇和回弹的 Interpolator
ObjectAnimator animator = ObjectAnimator.ofFloat(  
        imageView2, "translationX", 500);
animator.setInterpolator(new AnticipateOvershootInterpolator());  
animator.start(); 

介绍Interpolator
AccelerateDecelerateInterpolator
先加速再减速。这是默认的 Interpolator，也就是说如果你不设置的话，那么动画将会使用这个  Interpolator。
LinearInterpolator
匀速。
AccelerateInterpolator
持续加速。
DecelerateInterpolator
持续减速直到 0。
AnticipateInterpolator
先回拉一下再进行正常动画轨迹。效果看起来有点像投掷物体或跳跃等动作前的蓄力。
OvershootInterpolator
动画会超过目标值一些，然后再弹回来。效果看起来有点像你一屁股坐在沙发上后又被弹起来一点的感觉。
AnticipateOvershootInterpolator
上面这两个的结合版：开始前回拉，最后超过一些然后回弹。
BounceInterpolator
在目标值处弹跳。有点像玻璃球掉在地板上的效果。
CycleInterpolator
这个也是一个正弦 / 余弦曲线，不过它和 AccelerateDecelerateInterpolator 的区别是，
它可以自定义曲线的周期，所以动画可以不到终点就结束，也可以到达终点后回弹，
回弹的次数由曲线的周期决定，曲线的周期由 CycleInterpolator() 构造方法的参数决定。
PathInterpolator
自定义动画完成度 / 时间完成度曲线。
Path interpolatorPath = new Path();

...

// 匀速
interpolatorPath.lineTo(1, 1);  

Android 5.0 （API 21）引入了三个新的 Interpolator 模型，并把它们加入了 support v4 包中。这三个新的 Interpolator 每个都和之前的某个已有的 Interpolator 规则相似，只有略微的区别。
FastOutLinearInInterpolator
加速运动
FastOutSlowInInterpolator
先加速再减速。
LinearOutSlowInInterpolator
持续减速。

3. 设置监听器
设置监听器的方法， ViewPropertyAnimator 和 ObjectAnimator 略微不一样：
 ViewPropertyAnimator 用的是  setListener() 和 setUpdateListener() 方法，可以设置一个监听器，要移除监听器时通过  set[Update]Listener(null) 填 null 值来移除；
而 ObjectAnimator 则是用 addListener() 和  addUpdateListener() 来添加一个或多个监听器，移除监听器则是通过 remove[Update]Listener() 来指定移除对象。
另外，由于 ObjectAnimator 支持使用 pause() 方法暂停，所以它还多了一个 addPauseListener() /  removePauseListener() 的支持；
而 ViewPropertyAnimator 则独有 withStartAction() 和 withEndAction() 方法，可以设置一次性的动画开始或结束的监听。
3.1 ViewPropertyAnimator.setListener() / ObjectAnimator.addListener()
3.1.1 onAnimationStart(Animator animation)
当动画开始执行时，这个方法被调用。

3.1.2 onAnimationEnd(Animator animation)
当动画结束时，这个方法被调用。

3.1.3 onAnimationCancel(Animator animation)
当动画被通过 cancel() 方法取消时，这个方法被调用。

需要说明一下的是，就算动画被取消，onAnimationEnd() 也会被调用。所以当动画被取消时，
如果设置了  AnimatorListener，那么 onAnimationCancel() 和 onAnimationEnd() 都会被调用。
onAnimationCancel() 会先于 onAnimationEnd() 被调用。
3.1.4 onAnimationRepeat(Animator animation)
当动画通过 setRepeatMode() / setRepeatCount() 或 repeat() 方法重复执行时，这个方法被调用。
由于 ViewPropertyAnimator 不支持重复，所以这个方法对 ViewPropertyAnimator 相当于无效
3.2 ViewPropertyAnimator.setUpdateListener() / ObjectAnimator.addUpdateListener()
和上面 3.1 的两个方法一样，这两个方法虽然名称和可设置的监听器数量不一样，但本质其实都一样的，
它们的参数都是 AnimatorUpdateListener。它只有一个回调方法：onAnimationUpdate(ValueAnimator animation)。

3.2.1 onAnimationUpdate(ValueAnimator animation)
当动画的属性更新时（不严谨的说，即每过 10 毫秒，动画的完成度更新时），这个方法被调用。
方法的参数是一个 ValueAnimator，ValueAnimator 是 ObjectAnimator 的父类，也是 ViewPropertyAnimator 的内部实现，
所以这个参数其实就是 ViewPropertyAnimator 内部的那个 ValueAnimator，或者对于  ObjectAnimator 来说就是它自己本身。
ValueAnimator 有很多方法可以用，它可以查看当前的动画完成度、当前的属性值等等。不过  
ValueAnimator 是下一期才讲的内容，所以这期就不多说了。


1.针对特殊类型的属性来做属性动画；
2.针对复杂的属性关系来做属性动画。
TypeEvaluator

ArgbEvaluator
TypeEvaluator 最经典的用法是使用 ArgbEvaluator 来做颜色渐变的动画。

ObjectAnimator animator = ObjectAnimator.ofInt(view, "color", 0xffff0000, 0xff00ff00);  
animator.setEvaluator(new ArgbEvaluator());  
animator.start();  
在 Android 5.0 （API 21） 加入了新的方法 ofArgb()，所以如果你的 minSdk 大于或者等于 21
你可以直接用下面这种方式：
ObjectAnimator animator = ObjectAnimator.ofArgb(view, "color", 0xffff0000, 0xff00ff00);  
animator.start();  

自定义 Evaluator
实现TypeEvaluator<Object>接口，实现evaluate方法
ofObject()
借助于 TypeEvaluator，属性动画就可以通过 ofObject() 来对不限定类型的属性做动画了
为目标属性写一个自定义的 TypeEvaluator
使用 ofObject() 来创建 Animator，并把自定义的 TypeEvaluator 作为参数填入


PropertyValuesHolder 同一个动画中改变多个属性，
PropertyValuesHolder 来同时在一个动画中改变多个属性。
PropertyValuesHolder holder1 = PropertyValuesHolder.ofFloat("scaleX", 1);  
PropertyValuesHolder holder2 = PropertyValuesHolder.ofFloat("scaleY", 1);  
PropertyValuesHolder holder3 = PropertyValuesHolder.ofFloat("alpha", 1);

ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(view, holder1, holder2, holder3)  
animator.start();  

AnimatorSet 多个动画配合执行
有的时候，你不止需要在一个动画中改变多个属性，还会需要多个动画配合工作，比如，在内容的大小从 0 放大到 100% 大小后开始移动。
这种情况使用 PropertyValuesHolder 是不行的，因为这些属性如果放在同一个动画中，需要共享动画的开始时间、结束时间、
Interpolator 等等一系列的设定，这样就不能有先后次序地执行动画了。
这就需要用到 AnimatorSet 了
ObjectAnimator animator1 = ObjectAnimator.ofFloat(...);  
animator1.setInterpolator(new LinearInterpolator());  
ObjectAnimator animator2 = ObjectAnimator.ofInt(...);  
animator2.setInterpolator(new DecelerateInterpolator());

AnimatorSet animatorSet = new AnimatorSet();  
// 两个动画依次执行
animatorSet.playSequentially(animator1, animator2);  
animatorSet.start();  
使用 playSequentially()，就可以让两个动画依次播放，而不用为它们设置监听器来手动为他们监管协作。
以及这么用：
// 使用 AnimatorSet.play(animatorA).with/before/after(animatorB)
// 的方式来精确配置各个 Animator 之间的关系
animatorSet.play(animator1).with(animator2);  
animatorSet.play(animator1).before(animator2);  
animatorSet.play(animator1).after(animator2);  
animatorSet.start();
AnimatorSet ，你就可以对多个 Animator 进行统一规划和管理，让它们按照要求的顺序来工作

PropertyValuesHolders.ofKeyframe() 把同一个属性拆分
// 在 0% 处开始
Keyframe keyframe1 = Keyframe.ofFloat(0, 0);  
// 时间经过 50% 的时候，动画完成度 100%
Keyframe keyframe2 = Keyframe.ofFloat(0.5f, 100);  
// 时间见过 100% 的时候，动画完成度倒退到 80%，即反弹 20%
Keyframe keyframe3 = Keyframe.ofFloat(1, 80);  
PropertyValuesHolder holder = PropertyValuesHolder.ofKeyframe("progress", keyframe1, keyframe2, keyframe3);

ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(view, holder);  
animator.start();
第二部分，「关于复杂的属性关系来做动画」，就这么三种：

使用 PropertyValuesHolder 来对多个属性同时做动画；
使用 AnimatorSet 来同时管理调配多个动画；
PropertyValuesHolder 的进阶使用：使用 PropertyValuesHolder.ofKeyframe() 来把一个属性拆分成多段，执行更加精细的属性动画。
实际使用时候的选择，只要遵循一个原则就行：尽量用简单的。能用 View.animate() 实现就不用 ObjectAnimator，能用 ObjectAnimator 就不用 ValueAnimator。


